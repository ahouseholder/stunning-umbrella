# This is a basic workflow to help you get started with Actions

name: Test

on:
  workflow_dispatch:

jobs:
  create_branch:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.branch_name.outputs.bname }}
      
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: generate branch name
        id: branch_name
        run: echo "::set-output name=bname::$(uuidgen)"
        
      # Runs a single command using the runners shell
      - name: create temp branch
        run: |
          git checkout -b ${{ steps.branch_name.outputs.bname }}
          git push --set-upstream origin ${{ steps.branch_name.outputs.bname }}

  map_thing:
    runs-on: ubuntu-latest
    needs: create_branch
    
    strategy:
      matrix:
        pfx: [ 4, 5, 6, 7]
    
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.create_branch.outputs.branch_name }}
      
      - run: |
          echo $RANDOM > ${{ matrix.pfx }}_.txt
        
      - run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git add .
          git commit -m "add ${{ matrix.pfx }}.txt"
          for retry in {1..10}
            do
             git pull --rebase
             git push && break
             sleep $[ ( $RANDOM % 10 ) + 1]
          done
          
  reduce_thing:
    runs-on: ubuntu-latest
    needs: map_thing, create_branch
    
    steps:  
  
      - uses: actions/checkout@v2
        with:
          ref: ${{ needs.create_branch.outputs.branch_name }}
      
      - name: git config
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          
      - name: do the work
        run: |
          cat *_.txt | sort -n > out.txt
          rm -v *_.txt

      - name: commit the work
        run: |
          git add .
          git commit -m "replace individual files"

      - name: catch up with everything else
        run: |
          git pull --verbose --rebase
          git pull --verbose --rebase origin main
      
      - name: squash merge 
        run: |
          git fetch --verbose --all
          git checkout main
          git pull --verbose --rebase origin main
          git merge --verbose --stat --squash ${{ needs.create_branch.outputs.branch_name }}
          git commit -m "merge squashed ${{ needs.create_branch.outputs.branch_name }}"
          
      - name: push main
        run: git push --verbose origin main
          
      - name: delete temp branch
        run: |
          git push -d origin ${{ needs.create_branch.outputs.branch_name }}
          git branch -D ${{ needs.create_branch.outputs.branch_name }}
