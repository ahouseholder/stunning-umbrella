# This is a basic workflow to help you get started with Actions

name: Test

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  create_branch:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: |
          git checkout -b my_branch --track origin/my_branch
          git push

  add_files:
    runs-on: ubuntu-latest
    needs: create_branch
    
    strategy:
      matrix:
        pfx: [ 4, 5, 6, 7]
    
    steps:
      - uses: actions/checkout@v2
        with:
          ref: my_branch
      
      - run: |
          echo ${{ matrix.pfx }} > ${{ matrix.pfx }}_.txt
        
      - run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          git add .
          git commit -m "add ${{ matrix.pfx }}.txt"
          for retry in {1..10}
            do
             git pull --rebase
             git push && break
             sleep $[ ( $RANDOM % 10 ) + 1]
          done
          
  concat_files:
    runs-on: ubuntu-latest
    needs: add_files
    
    steps:
      - uses: actions/checkout@v2
        with:
          ref: my_branch
      
      - name: git config
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          
      - name: cat files
        run: |
          git branch
          cat *_.txt > out.txt
          rm -v *_.txt
          git status
          git add .
          git commit -m "replace individual files"
      
      - name: squash merge 
        run: |
          git checkout my_branch
          echo here1 
          git pull --verbose
          echo here2
          git fetch --verbose --all
          echo here3
          git checkout main
          echo here4
          git merge --verbose --squash my_branch
          echo here5
          git commit -m "merge squashed my_branch"
          echo here6
          git push --verbose origin main
          echo here7
          
      - name: delete my_branch
        run: |
          git push -d origin my_branch
          git branch -d my_branch
